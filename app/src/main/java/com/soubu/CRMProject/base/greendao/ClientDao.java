package com.soubu.CRMProject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Client".
*/
public class ClientDao extends AbstractDao<Client, Long> {

    public static final String TABLENAME = "Client";

    /**
     * Properties of entity Client.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Client_id = new Property(1, long.class, "client_id", false, "CLIENT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Fax = new Property(6, String.class, "fax", false, "FAX");
        public final static Property Network = new Property(7, String.class, "network", false, "NETWORK");
        public final static Property Area = new Property(8, String.class, "area", false, "AREA");
        public final static Property Summary = new Property(9, String.class, "summary", false, "SUMMARY");
        public final static Property Zip_code = new Property(10, String.class, "zip_code", false, "ZIP_CODE");
        public final static Property Follow_state = new Property(11, String.class, "follow_state", false, "FOLLOW_STATE");
        public final static Property From = new Property(12, String.class, "from", false, "FROM");
        public final static Property Industry = new Property(13, String.class, "industry", false, "INDUSTRY");
        public final static Property Scale = new Property(14, Integer.class, "scale", false, "SCALE");
        public final static Property Principal = new Property(15, String.class, "principal", false, "PRINCIPAL");
        public final static Property Address = new Property(16, String.class, "address", false, "ADDRESS");
        public final static Property Main_products = new Property(17, String.class, "main_products", false, "MAIN_PRODUCTS");
        public final static Property Turnover = new Property(18, String.class, "turnover", false, "TURNOVER");
        public final static Property Empirical_mode = new Property(19, String.class, "empirical_mode", false, "EMPIRICAL_MODE");
        public final static Property Major_business = new Property(20, String.class, "major_business", false, "MAJOR_BUSINESS");
    };


    public ClientDao(DaoConfig config) {
        super(config);
    }
    
    public ClientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Client\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLIENT_ID\" INTEGER NOT NULL ," + // 1: client_id
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" INTEGER," + // 3: type
                "\"PHONE\" TEXT," + // 4: phone
                "\"EMAIL\" TEXT," + // 5: email
                "\"FAX\" TEXT," + // 6: fax
                "\"NETWORK\" TEXT," + // 7: network
                "\"AREA\" TEXT," + // 8: area
                "\"SUMMARY\" TEXT," + // 9: summary
                "\"ZIP_CODE\" TEXT," + // 10: zip_code
                "\"FOLLOW_STATE\" TEXT," + // 11: follow_state
                "\"FROM\" TEXT," + // 12: from
                "\"INDUSTRY\" TEXT," + // 13: industry
                "\"SCALE\" INTEGER," + // 14: scale
                "\"PRINCIPAL\" TEXT," + // 15: principal
                "\"ADDRESS\" TEXT," + // 16: address
                "\"MAIN_PRODUCTS\" TEXT," + // 17: main_products
                "\"TURNOVER\" TEXT," + // 18: turnover
                "\"EMPIRICAL_MODE\" TEXT," + // 19: empirical_mode
                "\"MAJOR_BUSINESS\" TEXT);"); // 20: major_business
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Client\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Client entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClient_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(7, fax);
        }
 
        String network = entity.getNetwork();
        if (network != null) {
            stmt.bindString(8, network);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(11, zip_code);
        }
 
        String follow_state = entity.getFollow_state();
        if (follow_state != null) {
            stmt.bindString(12, follow_state);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(13, from);
        }
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(14, industry);
        }
 
        Integer scale = entity.getScale();
        if (scale != null) {
            stmt.bindLong(15, scale);
        }
 
        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(16, principal);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(17, address);
        }
 
        String main_products = entity.getMain_products();
        if (main_products != null) {
            stmt.bindString(18, main_products);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(19, turnover);
        }
 
        String empirical_mode = entity.getEmpirical_mode();
        if (empirical_mode != null) {
            stmt.bindString(20, empirical_mode);
        }
 
        String major_business = entity.getMajor_business();
        if (major_business != null) {
            stmt.bindString(21, major_business);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Client entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClient_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(7, fax);
        }
 
        String network = entity.getNetwork();
        if (network != null) {
            stmt.bindString(8, network);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(11, zip_code);
        }
 
        String follow_state = entity.getFollow_state();
        if (follow_state != null) {
            stmt.bindString(12, follow_state);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(13, from);
        }
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(14, industry);
        }
 
        Integer scale = entity.getScale();
        if (scale != null) {
            stmt.bindLong(15, scale);
        }
 
        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(16, principal);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(17, address);
        }
 
        String main_products = entity.getMain_products();
        if (main_products != null) {
            stmt.bindString(18, main_products);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(19, turnover);
        }
 
        String empirical_mode = entity.getEmpirical_mode();
        if (empirical_mode != null) {
            stmt.bindString(20, empirical_mode);
        }
 
        String major_business = entity.getMajor_business();
        if (major_business != null) {
            stmt.bindString(21, major_business);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Client readEntity(Cursor cursor, int offset) {
        Client entity = new Client( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // client_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fax
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // network
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // area
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // summary
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // zip_code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // follow_state
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // from
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // industry
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // scale
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // principal
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // address
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // main_products
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // turnover
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // empirical_mode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // major_business
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Client entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClient_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFax(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNetwork(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArea(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSummary(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZip_code(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFollow_state(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFrom(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIndustry(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setScale(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setPrincipal(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddress(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMain_products(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTurnover(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEmpirical_mode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMajor_business(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Client entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Client entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
