package com.soubu.CRMProject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Clue".
*/
public class ClueDao extends AbstractDao<Clue, Long> {

    public static final String TABLENAME = "Clue";

    /**
     * Properties of entity Clue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Clue_id = new Property(1, String.class, "clue_id", false, "CLUE_ID");
        public final static Property Wechat = new Property(2, String.class, "wechat", false, "WECHAT");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Landline = new Property(4, String.class, "landline", false, "LANDLINE");
        public final static Property Post = new Property(5, String.class, "post", false, "POST");
        public final static Property Department = new Property(6, String.class, "department", false, "DEPARTMENT");
        public final static Property Company = new Property(7, String.class, "company", false, "COMPANY");
        public final static Property From = new Property(8, Integer.class, "from", false, "FROM");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Principal = new Property(10, String.class, "principal", false, "PRINCIPAL");
        public final static Property Area = new Property(11, String.class, "area", false, "AREA");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property Zip_code = new Property(13, String.class, "zip_code", false, "ZIP_CODE");
        public final static Property Remark = new Property(14, String.class, "remark", false, "REMARK");
        public final static Property Network = new Property(15, String.class, "network", false, "NETWORK");
        public final static Property Email = new Property(16, String.class, "email", false, "EMAIL");
        public final static Property Wangwang = new Property(17, String.class, "wangwang", false, "WANGWANG");
        public final static Property Follow_state = new Property(18, Integer.class, "follow_state", false, "FOLLOW_STATE");
        public final static Property Qq = new Property(19, String.class, "qq", false, "QQ");
    };


    public ClueDao(DaoConfig config) {
        super(config);
    }
    
    public ClueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Clue\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLUE_ID\" TEXT NOT NULL ," + // 1: clue_id
                "\"WECHAT\" TEXT," + // 2: wechat
                "\"PHONE\" TEXT," + // 3: phone
                "\"LANDLINE\" TEXT," + // 4: landline
                "\"POST\" TEXT," + // 5: post
                "\"DEPARTMENT\" TEXT," + // 6: department
                "\"COMPANY\" TEXT," + // 7: company
                "\"FROM\" INTEGER," + // 8: from
                "\"NAME\" TEXT," + // 9: name
                "\"PRINCIPAL\" TEXT," + // 10: principal
                "\"AREA\" TEXT," + // 11: area
                "\"ADDRESS\" TEXT," + // 12: address
                "\"ZIP_CODE\" TEXT," + // 13: zip_code
                "\"REMARK\" TEXT," + // 14: remark
                "\"NETWORK\" TEXT," + // 15: network
                "\"EMAIL\" TEXT," + // 16: email
                "\"WANGWANG\" TEXT," + // 17: wangwang
                "\"FOLLOW_STATE\" INTEGER," + // 18: follow_state
                "\"QQ\" TEXT);"); // 19: qq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Clue\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClue_id());
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(3, wechat);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String landline = entity.getLandline();
        if (landline != null) {
            stmt.bindString(5, landline);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(6, post);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        Integer from = entity.getFrom();
        if (from != null) {
            stmt.bindLong(9, from);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(11, principal);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(12, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(14, zip_code);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(15, remark);
        }
 
        String network = entity.getNetwork();
        if (network != null) {
            stmt.bindString(16, network);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(17, email);
        }
 
        String wangwang = entity.getWangwang();
        if (wangwang != null) {
            stmt.bindString(18, wangwang);
        }
 
        Integer follow_state = entity.getFollow_state();
        if (follow_state != null) {
            stmt.bindLong(19, follow_state);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(20, qq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClue_id());
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(3, wechat);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String landline = entity.getLandline();
        if (landline != null) {
            stmt.bindString(5, landline);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(6, post);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        Integer from = entity.getFrom();
        if (from != null) {
            stmt.bindLong(9, from);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindString(11, principal);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(12, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(14, zip_code);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(15, remark);
        }
 
        String network = entity.getNetwork();
        if (network != null) {
            stmt.bindString(16, network);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(17, email);
        }
 
        String wangwang = entity.getWangwang();
        if (wangwang != null) {
            stmt.bindString(18, wangwang);
        }
 
        Integer follow_state = entity.getFollow_state();
        if (follow_state != null) {
            stmt.bindLong(19, follow_state);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(20, qq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Clue readEntity(Cursor cursor, int offset) {
        Clue entity = new Clue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // clue_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wechat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // landline
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // post
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // department
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // company
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // from
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // principal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // area
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zip_code
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // remark
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // network
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // email
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // wangwang
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // follow_state
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // qq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClue_id(cursor.getString(offset + 1));
        entity.setWechat(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLandline(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPost(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompany(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFrom(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrincipal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setArea(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZip_code(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRemark(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNetwork(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEmail(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWangwang(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFollow_state(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setQq(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
