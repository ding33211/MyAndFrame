package com.soubu.CRMProject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Product".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "Product";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Product_id = new Property(1, long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Classification = new Property(2, Long.class, "classification", false, "CLASSIFICATION");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(4, Double.class, "price", false, "PRICE");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property Stock = new Property(6, Long.class, "stock", false, "STOCK");
        public final static Property Cost = new Property(7, Long.class, "cost", false, "COST");
        public final static Property Buy_state = new Property(8, Integer.class, "buy_state", false, "BUY_STATE");
        public final static Property Width = new Property(9, Long.class, "width", false, "WIDTH");
        public final static Property Product_name = new Property(10, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Ingredient = new Property(11, String.class, "ingredient", false, "INGREDIENT");
        public final static Property Use = new Property(12, String.class, "use", false, "USE");
        public final static Property Season = new Property(13, Integer.class, "season", false, "SEASON");
        public final static Property Crafts = new Property(14, Integer.class, "crafts", false, "CRAFTS");
        public final static Property Color = new Property(15, String.class, "color", false, "COLOR");
        public final static Property Flower = new Property(16, String.class, "flower", false, "FLOWER");
    };


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Product\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 1: product_id
                "\"CLASSIFICATION\" INTEGER," + // 2: classification
                "\"TITLE\" TEXT," + // 3: title
                "\"PRICE\" REAL," + // 4: price
                "\"IMG\" TEXT," + // 5: img
                "\"STOCK\" INTEGER," + // 6: stock
                "\"COST\" INTEGER," + // 7: cost
                "\"BUY_STATE\" INTEGER," + // 8: buy_state
                "\"WIDTH\" INTEGER," + // 9: width
                "\"PRODUCT_NAME\" TEXT," + // 10: product_name
                "\"INGREDIENT\" TEXT," + // 11: ingredient
                "\"USE\" TEXT," + // 12: use
                "\"SEASON\" INTEGER," + // 13: season
                "\"CRAFTS\" INTEGER," + // 14: crafts
                "\"COLOR\" TEXT," + // 15: color
                "\"FLOWER\" TEXT);"); // 16: flower
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Product\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProduct_id());
 
        Long classification = entity.getClassification();
        if (classification != null) {
            stmt.bindLong(3, classification);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        Long stock = entity.getStock();
        if (stock != null) {
            stmt.bindLong(7, stock);
        }
 
        Long cost = entity.getCost();
        if (cost != null) {
            stmt.bindLong(8, cost);
        }
 
        Integer buy_state = entity.getBuy_state();
        if (buy_state != null) {
            stmt.bindLong(9, buy_state);
        }
 
        Long width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(10, width);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(11, product_name);
        }
 
        String ingredient = entity.getIngredient();
        if (ingredient != null) {
            stmt.bindString(12, ingredient);
        }
 
        String use = entity.getUse();
        if (use != null) {
            stmt.bindString(13, use);
        }
 
        Integer season = entity.getSeason();
        if (season != null) {
            stmt.bindLong(14, season);
        }
 
        Integer crafts = entity.getCrafts();
        if (crafts != null) {
            stmt.bindLong(15, crafts);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
 
        String flower = entity.getFlower();
        if (flower != null) {
            stmt.bindString(17, flower);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProduct_id());
 
        Long classification = entity.getClassification();
        if (classification != null) {
            stmt.bindLong(3, classification);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        Long stock = entity.getStock();
        if (stock != null) {
            stmt.bindLong(7, stock);
        }
 
        Long cost = entity.getCost();
        if (cost != null) {
            stmt.bindLong(8, cost);
        }
 
        Integer buy_state = entity.getBuy_state();
        if (buy_state != null) {
            stmt.bindLong(9, buy_state);
        }
 
        Long width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(10, width);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(11, product_name);
        }
 
        String ingredient = entity.getIngredient();
        if (ingredient != null) {
            stmt.bindString(12, ingredient);
        }
 
        String use = entity.getUse();
        if (use != null) {
            stmt.bindString(13, use);
        }
 
        Integer season = entity.getSeason();
        if (season != null) {
            stmt.bindLong(14, season);
        }
 
        Integer crafts = entity.getCrafts();
        if (crafts != null) {
            stmt.bindLong(15, crafts);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
 
        String flower = entity.getFlower();
        if (flower != null) {
            stmt.bindString(17, flower);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // classification
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // stock
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // cost
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // buy_state
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // width
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // product_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ingredient
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // use
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // season
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // crafts
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // color
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // flower
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.getLong(offset + 1));
        entity.setClassification(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStock(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCost(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setBuy_state(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWidth(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setProduct_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIngredient(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUse(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSeason(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCrafts(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setColor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFlower(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
